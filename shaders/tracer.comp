#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D img;

struct Camera {
  vec3 position;
  vec3 view;
  vec3 right;
  vec3 up;
};

struct Grid {
  vec3 minimum_cell;
  vec3 maximum_cell;
  vec3 cell_size;
  uvec3 resolution;
};

layout (set = 0, binding = 1) uniform Uniform {
  Camera camera;
  Grid grid;
};

layout(set = 0, binding = 2) buffer Statistics {
  uint cell_intersections;
  uint triangle_tests;
  uint triangle_intersections;
};

layout(set = 0, binding = 3) buffer Cells {
  uint cells[];
};

layout(set = 0, binding = 4) buffer References {
  uint references[];
};

layout (std140, set = 1, binding = 0) buffer Positions {
  vec3 positions[];
};

layout (std140, set = 1, binding = 1) buffer Indices {
  uvec3 indices[];
};

layout (std140, set = 1, binding = 2) buffer Noramls {
  vec3 normals[];
};

layout (std140, set = 1, binding = 3) buffer TexCoords {
  vec2 texcoords[];
};

struct Model {
  uint indices_start;
  uint indices_end;
  int material_idx;
};

layout (std140, set = 1, binding = 4) buffer Models {
  Model models[];
};

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
  float dissolve;
  float optical_density;
  int ambient_texture_idx;
  int diffuse_texture_idx;
  int specular_texture_idx;
  int normal_texture_idx;
  int disolve_texture_idx;
};

layout (std140, set = 1, binding = 5) buffer Materials {
  Material materials[];
};

// I would like to use sampler2DArray, but this extension is supported only by NVidia
// Maximum number of 16, however, is supported by 97% of GPUs
layout(set = 1, binding = 6) uniform sampler2D diffuse_textures[16];

struct Ray {
  vec3 orig;
  vec3 dir;
};

struct IntersectionResult {
  vec2 uv;
  float time;
  uint triangle_idx;
  bool intersect;
};

IntersectionResult void_intersection() {
  IntersectionResult result;
  result.time = 1e20;
  result.intersect = false;
  return result;
}

bool intersect_bbox(in Ray ray, in vec3 inv_dir, out float thit) {
  vec3 bbox[2] = { grid.minimum_cell, grid.maximum_cell };

  uvec3 dir_sign = uvec3(lessThan(ray.dir, vec3(0.0)));
  vec3 tmin = (vec3(bbox[dir_sign.x].x, bbox[dir_sign.y].y,
        bbox[dir_sign.z].z) - ray.orig) * inv_dir;
  vec3 tmax = (vec3(bbox[1 - dir_sign.x].x, bbox[1 - dir_sign.y].y,
        bbox[1 - dir_sign.z].z) - ray.orig) * inv_dir;

  if (tmin.x > tmax.y || tmin.y > tmax.x) {
    return false;
  }

  tmin.x = max(tmin.x, tmin.y);
  tmax.x = min(tmax.x, tmax.y);

  if (tmin.x > tmax.z || tmin.z > tmax.x) {
    return false;
  }

  thit = max(tmin.x, tmin.z);

  return true;
}

bool intersect_triangle(in Ray ray, in uint triangle_idx,
                        out IntersectionResult intersection) {
  atomicAdd(triangle_tests, 1);

  const float EPSILON = 1e-8;

  uvec3 triangle = indices[triangle_idx];
  vec3 v0 = positions[triangle.x];
  vec3 v1 = positions[triangle.y];
  vec3 v2 = positions[triangle.z];

  vec3 v0v1 = v1 - v0;
  vec3 v0v2 = v2 - v0;
  vec3 pvec = cross(ray.dir, v0v2);
  float det = dot(v0v1, pvec);
  if (abs(det) < EPSILON) {
    return false;
  }

  float invDet = 1.0 / det;
  vec3 tvec = ray.orig - v0;
  float u = dot(tvec, pvec) * invDet;
  if (u < 0.0 || u > 1.0) {
    return false;
  }

  vec3 qvec = cross(tvec, v0v1);
  float v = dot(ray.dir, qvec) * invDet;
  if (v < 0.0 || u + v > 1.0) {
    return false;
  }

  float t = dot(v0v2, qvec) * invDet;
  if (t < 0) {
    return false;
  }

  atomicAdd(triangle_intersections, 1);
  intersection = IntersectionResult(
    vec2(u, v),
    t,
    triangle_idx,
    true
  );
  return true;
}

IntersectionResult intersect_cell(in Ray ray, in uint cell_idx,
                                  in IntersectionResult best) {
  atomicAdd(cell_intersections, 1);
  IntersectionResult result;
  for (uint i = cells[cell_idx]; i < cells[cell_idx + 1]; ++i) {
    uint triangle_idx = references[i];
    if (intersect_triangle(ray, triangle_idx, result)
          && best.time > result.time) {
      best = result;
    }
  }
  return best;
}

uint get_axis(in vec3 next_t) {
  const uint AXIS_MAP[8] = {2, 1, 2, 1, 2, 2, 0, 0};
  uint k =
    (uint(next_t.x < next_t.y) << 2) +
    (uint(next_t.x < next_t.z) << 1) +
     uint(next_t.y < next_t.z);
  return AXIS_MAP[k];
}

vec2 point_st(in uvec3 triangle, in vec3 wuv) {
  vec2 st0 = texcoords[triangle.x];
  vec2 st1 = texcoords[triangle.y];
  vec2 st2 = texcoords[triangle.z];
  return wuv.x * st0 + wuv.y * st1 + wuv.z * st2;
}

vec3 point_norm(in uvec3 triangle, in vec3 wuv) {
  vec3 norm0 = normals[triangle.x];
  vec3 norm1 = normals[triangle.y];
  vec3 norm2 = normals[triangle.z];
  return wuv.x * norm0 + wuv.y * norm1 + wuv.z * norm2;
}

uint find_model(in uint triangle_idx) {
  for (uint i = 0; i < models.length(); ++i) {
    Model model = models[i];
    if (triangle_idx >= model.indices_start &&
        triangle_idx < model.indices_end) {
      return i;
    }
  }
}

vec3 get_color(in Ray ray, in IntersectionResult intersection) {
  uvec3 triangle = indices[intersection.triangle_idx];
  vec3 wuv = vec3(1.0 - intersection.uv.x - intersection.uv.y, intersection.uv.xy);
  vec3 norm = point_norm(triangle, wuv);
  float cosine_factor = dot(norm, ray.dir);
  if (cosine_factor < 0) {
    cosine_factor *= -1.0;
  }

  uint model_idx = find_model(intersection.triangle_idx);
  uint material_idx = models[model_idx].material_idx;
  if (material_idx == -1) {
    return cosine_factor * vec3(1.0);
  }
  Material material = materials[material_idx];
  if (material.diffuse_texture_idx != -1) {
    vec2 st = point_st(triangle, wuv);
    return cosine_factor * texture(diffuse_textures[material.diffuse_texture_idx], st).rgb;
  } else {
    return cosine_factor * vec3(material.diffuse);
  }
}

IntersectionResult intersect_grid(in Ray ray, in vec3 inv_dir, in float t_hit_bbox) {
  vec3 ray_origin_cell = ray.orig + ray.dir * vec3(t_hit_bbox) - grid.minimum_cell;
  uvec3 current_cell = clamp(uvec3(ray_origin_cell / grid.cell_size),
                             uvec3(0), grid.resolution - uvec3(1));

  vec3 dir_sign = sign(ray.dir);
  vec3 delta_t = dir_sign * grid.cell_size * inv_dir;
  ivec3 next_step = ivec3(dir_sign);
  vec3 next_t = vec3(t_hit_bbox) +
      ((current_cell + step(0.0, ray.dir)) * grid.cell_size - ray_origin_cell) *
      inv_dir;
  uvec3 exit = mix(grid.resolution, uvec3(-1), lessThan(ray.dir, vec3(0.0)));

  IntersectionResult best = void_intersection();
  while (true) {
    uint cell_idx = current_cell.x + grid.resolution.x *
                    (current_cell.y + current_cell.z * grid.resolution.y);
    best = intersect_cell(ray, cell_idx, best);

    uint axis = get_axis(next_t);
    if (best.time < next_t[axis]) {
      break;
    }
    current_cell[axis] += next_step[axis];
    if (current_cell[axis] == exit[axis]) {
      break;
    }
    next_t[axis] += delta_t[axis];
  }

  return best;
}

vec3 trace(in Ray ray) {
  vec3 inv_dir = vec3(1.0) / ray.dir;
  float t_hit_bbox;
  if (!intersect_bbox(ray, inv_dir, t_hit_bbox)) {
    return vec3(0.0);
  }

  IntersectionResult best = intersect_grid(ray, inv_dir, t_hit_bbox);
  return best.intersect ? get_color(ray, best) : vec3(0.0);
}

Ray primary_ray(in vec2 uv, in float aspect_ratio) {
  vec2 trans = 2.0 * uv - vec2(1.0);
  vec3 dir = camera.view + camera.right * trans.x + camera.up * trans.y;
  dir *= vec2(aspect_ratio, 1.0).xyx;

  Ray ray;
  ray.orig = camera.position;
  ray.dir = normalize(dir);

  return ray;
}

void main() {
  vec2 dim = imageSize(img);
  vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;
  float aspect_ratio = dim.x / dim.y;
  Ray ray = primary_ray(uv, aspect_ratio);
  vec3 color = trace(ray);
  imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}
